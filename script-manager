#!/bin/bash

SEARCH_PATH=~/bin

PROJECT_DIRS=$(dirname $(readlink -f $(find $SEARCH_PATH -type l)))

function list_projects() {
   for dir in $PROJECT_DIRS 
   do
      cd $dir
      if git rev-parse &>/dev/null
      then
         REPO_NAME="$(basename $(git rev-parse --show-toplevel))"
         echo $dir
      fi
   done
}

function update_projects() {
   for dir in $PROJECT_DIRS 
   do
      cd $dir
   
      if git rev-parse &>/dev/null
      then
           REPO_NAME="$(basename $(git rev-parse --show-toplevel))"
   
           LOCAL=$(git rev-parse @ 2>/dev/null )
           if [ "$?" -ne 0 ]
           then
               #there is no HEAD commit
               continue
           fi
   
           REMOTE=$(git rev-parse @{u} 2>/dev/null )
           if [ "$?" -ne 0 ]
           then
               #there is no upstream configured
               continue
           fi
   
           BASE=$(git merge-base @ @{u})
   
           if [ $LOCAL = $REMOTE ]
           then
               #TODO: list files: be verbose
               #TODO: add files
               #TODO: remove files
               #TODO: commit files
               #TODO: resolve
               TOUCHED=no
               if ! git diff --exit-code &>/dev/null #unstaged
               then
                   TOUCHED=yes
                   echo $REPO_NAME have unstaged files
               fi
   
               if ! git diff --cached --exit-code &>/dev/null #staged
               then
                   TOUCHED=yes
                   echo $REPO_NAME have staged files
               fi
   
               if [ -n "$(git ls-files --other --exclude-standard --directory)" ] #untracked
               then
                   TOUCHED=yes
                   echo $REPO_NAME have untracked files
               fi
   
               if [ "$TOUCHED" = "no" ] && [ "$SILENT" = "no" ]
               then                   
                   echo "$REPO_NAME Up-to-date"
               fi
   
           elif [ $LOCAL = $BASE ]
           then
               echo "$REPO_NAME updatable"
               #TODO: option to show incoming changes
               while true; do
                   read -p "update?" ANS
                   case $ANS in
                   [Yy]* ) 
                       git pull
                       break;;
                   [Ll]* )
                       git logga @..@{u} 
                       ;;
                   [Nn]* ) 
                       break;;
                   * ) 
                       echo "answer allowed: y n l";;
                   esac
               done
           elif [ $REMOTE = $BASE ]
           then
               #TODO: push
               echo "$REPO_NAME Need to push"
           else
               #TODO: resolve, merge, discart
               echo "$REPO_NAME Diverged"
           fi
      fi
   done
}

echo
if [ "$1" == "-e" ]
then
   select project in $(list_projects)
   do
      cd $project
      select file in $(ls -1)
      do
         env vim $file
      done
   done
elif [ "$1" == "-u" ]
then
   update_projects 
elif [ "$1" == "-s" ]
then
   SILENT="yes"
   update_projects s
fi
echo


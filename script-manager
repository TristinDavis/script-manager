#!/bin/bash

#
# Help to maintain your script ecosystem
#

# debug {{{
eval SCRIPT_DEBUG="\$$(basename $0 | tr - _)_DEBUG"
SCRIPT_DEBUG=${SCRIPT_DEBUG:--1}

if [ "$SCRIPT_DEBUG" -ge 1 ]
then
   set -x
fi
if [ "$SCRIPT_DEBUG" -ge 10 ]
then
   set -v
fi
#}}}

# functions {{{
function help {
   local scriptname="$(basename $0)"
   cat >&2 <<EOF
$scriptname is a manager to keep you up to date with your scripts

Options:

    -l, --list                List projects linked in path. (default)
    -s, --status              Show status for projects
    -e, --edit                Allows to edit files on project
    -u, --update              Update projects
    -r, --runtime[=path]      Search on runtime path (default)
    -p, --project[=path]      Search on projects path
    -c, --config=path         Change config file
        --silent              Work projects silently
        --goto[=path]         Select a path for a project under version control

Examples :

 $ $scriptname
 $ $scriptname -s
 $ $scriptname -u
 $ cd \$($scriptname --goto)

EOF
}

function load_project_dirs() {
  if [ "$RUNTIME" == "yes" ]
   then
      FIND_OPTIONS="$SEARCH_PATH -type l"
   else
      FIND_OPTIONS="$SEARCH_PATH -type d -name .git"
   fi
   if [ "$FILTER" != "" ]
   then
      GREP_FILTER="grep -i $FILTER |"
   else
      GREP_FILTER=""
   fi
   PROJECT_DIRS=$(dirname $(readlink -f $(eval "find $FIND_OPTIONS | $GREP_FILTER sort") 2>/dev/null) 2>/dev/null)
}

function real_dir() {
   echo $(dirname $(readlink -f $1))
}

function list_projects() {
   load_project_dirs
   for dir in $PROJECT_DIRS 
   do
      cd $dir
      if git rev-parse &>/dev/null
      then
         REPO_NAME="$(basename $(git rev-parse --show-toplevel))"
         echo $dir
      fi
   done
   echo
}

function update_projects() {
   load_project_dirs
   for dir in $PROJECT_DIRS
   do
      cd $dir

      if git rev-parse &>/dev/null
      then
           REPO_NAME="$(basename $(git rev-parse --show-toplevel))"

           LOCAL=$(git rev-parse @ 2>/dev/null )
           if [ "$?" -ne 0 ]
           then
               #there is no HEAD commit
               continue
           fi

           REMOTE=$(git rev-parse @{u} 2>/dev/null )
           if [ "$?" -ne 0 ]
           then
               #there is no upstream configured
               continue
           fi

           BASE=$(git merge-base @ @{u})

           if [ $LOCAL = $REMOTE ]
           then
               #TODO: list files: be verbose
               #TODO: add files
               #TODO: remove files
               #TODO: commit files
               #TODO: resolve
               TOUCHED=no
               if ! git diff --exit-code &>/dev/null #unstaged
               then
                   TOUCHED=yes
                   echo $REPO_NAME have unstaged files
               fi

               if ! git diff --cached --exit-code &>/dev/null #staged
               then
                   TOUCHED=yes
                   echo $REPO_NAME have staged files
               fi

               if [ -n "$(git ls-files --other --exclude-standard --directory)" ] #untracked
               then
                   TOUCHED=yes
                   echo $REPO_NAME have untracked files
               fi

               if [ "$TOUCHED" = "no" ] && [ "$SILENT" = "no" ]
               then
                   echo "$REPO_NAME Up-to-date"
               fi

           elif [ $LOCAL = $BASE ]
           then
               echo "$REPO_NAME updatable"
               #TODO: option to show incoming changes
               if [ "$ACTION" == "update" ]
               then
                  while true; do
                      read -p "update?" ANS
                      case $ANS in
                      [Yy]* )
                          git pull
                          break;;
                      [Ll]* )
                          git logga @..@{u} 
                          ;;
                      [Nn]* )
                          break;;
                      * )
                          echo "answer allowed: y n l";;
                      esac
                  done
               fi
           elif [ $REMOTE = $BASE ]
           then
               #TODO: push
               echo "$REPO_NAME Need to push"
           else
               #TODO: resolve, merge, discart
               echo "$REPO_NAME Diverged"
           fi
      fi
   done
   echo
}

function edit_project {
   select projectpath in $(list_projects) "quit"
   do
      if [ "$REPLY" == "quit" ]
      then
         exit 0
      fi

      cd $projectpath
      select file in $(ls -1)
      do
         env vim $file
      done
   done
}

function goto_project {
   select projectpath in $(list_projects)
   do
      echo $projectpath
      exit 0
   done
}
# }}}

# init {{{
INIT_FILE=~/.script-manager
SEARCH_PATH=~/bin
RUNTIME='yes'
ACTION="list"
FILTER=""
# }}}

# parse {{{
TEMP=$(getopt -o elusp::r::ch -l edit,list,update,silent,status,goto::,project::,runtime::,config,help -n $(basename $0) -- "$@")

EXIT=$?
if [ $EXIT != 0 ]
then
   help
   exit $EXIT
fi

# process script arguments
eval set -- "$TEMP"

echo

while true
do
   case "$1" in
      -e|--edit)
         ACTION="edit"
         ;;
      -l|--list)
         ACTION="list"
         ;;
      -u|--update)
         ACTION="update"
         ;;
      -s|--status)
         ACTION="status"
         ;;
      --silent) 
         SILENT="yes"
         ACTION="update"
         ;;
      --goto)
         ACTION="goto"
         case "$2" in
             "")
               shift
               ;;
             *)
               FILTER="$2"
               shift
               ;;
         esac
         ;;
      -p|--project)
         RUNTIME="no"
         case "$2" in
             "")
               shift
               ;;
             *)
               PROJECTS_PATH="$2"
               shift
               ;;
         esac
         ;;
      -r|--runtime)
         RUNTIME="yes"
         case "$2" in
             "")
               shift
               ;;
             *)
               RUNTIME_PATH="$2"
               shift
               ;;
         esac
         ;;
      -c|--config)
         INIT_FILE="$1"
         shift
         ;;
      -h|--help)
         help
         exit
         ;;
      --)
         shift
         break
         ;;
      *)
         cat <&2 <<EOF

Error, unknow arguments $1
EOF
         help
         exit 1
         ;;
   esac
   shift
done
# }}}

# exec {{{

if [ -f "$INIT_FILE" ]
then
   . $(real_dir $0)/bash-ini-parser/bash-ini-parser
   cfg_parser $INIT_FILE
   cfg.section.config
   RUNTIME_PATH=$path
   PROJECTS_PATH=$projects
fi

if [ "$RUNTIME" == "yes" ]
then
   SEARCH_PATH=${RUNTIME_PATH:-$SEARCH_PATH}
else
   SEARCH_PATH=${PROJECTS_PATH:-$SEARCH_PATH}
fi

case "$ACTION" in
   list)
      list_projects
      ;;
   status)
      update_projects
      ;;
   update)
      update_projects
      ;;
   edit)
      edit_project
      ;;
   goto)
      goto_project
      ;;
   *)
      ;;
esac

# }}}

# vim: fdm=marker

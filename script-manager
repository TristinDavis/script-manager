#!/bin/bash

#
# Help to maintain your script ecosystem
#

# debug {{{
eval SCRIPT_DEBUG="\$$(basename $0 | tr - _)_DEBUG"
SCRIPT_DEBUG=${SCRIPT_DEBUG:--1}

if [ "$SCRIPT_DEBUG" -ge 1 ]
then
   set -x
fi
if [ "$SCRIPT_DEBUG" -ge 10 ]
then
   set -v
fi
#}}}

# init {{{
SEARCH_PATH=~/bin
# }}}

# functions {{{
function help {
   local scriptname="$(basename $0)"
   cat >&2 <<EOF
$scriptname is a manager to keep you up to date with your scripts

Options:

    -l, --list      List projects linked in path. (default)
    -e, --edit      Allows to edit files on project
    -u, --update    Update projects
    -s, --silent    Update projects silently
        --goto      Select a path for a project under version control

Examples :

 $ $scriptname
 $ $scriptname -u
 $ cd \$($scriptname --goto)

EOF
}


PROJECT_DIRS=$(dirname $(readlink -f $(find $SEARCH_PATH -type l | sort)))

function list_projects() {
   for dir in $PROJECT_DIRS 
   do
      cd $dir
      if git rev-parse &>/dev/null
      then
         REPO_NAME="$(basename $(git rev-parse --show-toplevel))"
         echo $dir
      fi
   done
   echo
}

function update_projects() {
   for dir in $PROJECT_DIRS
   do
      cd $dir

      if git rev-parse &>/dev/null
      then
           REPO_NAME="$(basename $(git rev-parse --show-toplevel))"

           LOCAL=$(git rev-parse @ 2>/dev/null )
           if [ "$?" -ne 0 ]
           then
               #there is no HEAD commit
               continue
           fi

           REMOTE=$(git rev-parse @{u} 2>/dev/null )
           if [ "$?" -ne 0 ]
           then
               #there is no upstream configured
               continue
           fi

           BASE=$(git merge-base @ @{u})

           if [ $LOCAL = $REMOTE ]
           then
               #TODO: list files: be verbose
               #TODO: add files
               #TODO: remove files
               #TODO: commit files
               #TODO: resolve
               TOUCHED=no
               if ! git diff --exit-code &>/dev/null #unstaged
               then
                   TOUCHED=yes
                   echo $REPO_NAME have unstaged files
               fi

               if ! git diff --cached --exit-code &>/dev/null #staged
               then
                   TOUCHED=yes
                   echo $REPO_NAME have staged files
               fi

               if [ -n "$(git ls-files --other --exclude-standard --directory)" ] #untracked
               then
                   TOUCHED=yes
                   echo $REPO_NAME have untracked files
               fi

               if [ "$TOUCHED" = "no" ] && [ "$SILENT" = "no" ]
               then
                   echo "$REPO_NAME Up-to-date"
               fi

           elif [ $LOCAL = $BASE ]
           then
               echo "$REPO_NAME updatable"
               #TODO: option to show incoming changes
               while true; do
                   read -p "update?" ANS
                   case $ANS in
                   [Yy]* )
                       git pull
                       break;;
                   [Ll]* )
                       git logga @..@{u} 
                       ;;
                   [Nn]* )
                       break;;
                   * )
                       echo "answer allowed: y n l";;
                   esac
               done
           elif [ $REMOTE = $BASE ]
           then
               #TODO: push
               echo "$REPO_NAME Need to push"
           else
               #TODO: resolve, merge, discart
               echo "$REPO_NAME Diverged"
           fi
      fi
   done
   echo
}
# }}}

# parse {{{
TEMP=$(getopt -o elush -l edit,list,update,silent,goto,help -n $(basename $0) -- "$@")

EXIT=$?
if [ $EXIT != 0 ]
then
   help
   exit $EXIT
fi

# process script arguments
eval set -- "$TEMP"

echo

#TODO: Only parse commands, not execute here
while true
do
   case "$1" in
      -e|--edit)
         select projectpath in $(list_projects) "quit"
         do
            if [ "$REPLY" == "quit" ]
            then
               exit 0
            fi

            cd $projectpath
            select file in $(ls -1)
            do
               env vim $file
            done
         done
         ;;
      -l|--list)
         list_projects
         exit 0
         ;;
      -u|--update)
         update_projects
         exit 0
         ;;
      -s|--silent) 
         SILENT="yes"
         update_projects s
         exit
         ;;
      --goto)
         select projectpath in $(list_projects)
         do
            echo $projectpath
            exit 0
         done
         ;;
      -h|--help)
         help
         exit
         ;;
      --)
         shift
         break ;;
      *)
         cat <&2 <<EOF

Error, unknow arguments $1
EOF
         help
         exit 1
         ;;
   esac
   shift
done
# }}}

# exec {{{
list_projects
# }}}

# vim: fdm=marker
